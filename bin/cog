#!/usr/bin/env bash
set -o pipefail

CMD=${1:-help}


# function to get the directory containing cog
get_script_dir () {
     SOURCE="${BASH_SOURCE[0]}"
     # While $SOURCE is a symlink, resolve it
     while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
     done
     DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
     echo "$DIR"
}

# Yarn global adds the cog binary to your $PATH through a bunch of
# symlinks. So this uses the get_script_dir function to find the
# directory containing the cog script and then navigates up the tree
SCRIPT_DIR=$(dirname $(get_script_dir))

# function to get the project directory by scanning up the directory
# hierarchy looking for a bin folder or a .cogconfig file
get_project_dir () {
    CHECK=$(pwd)
    while [ -d "$CHECK" ] && [ "$CHECK" != "/" ]; do
        if [ -f "$CHECK/.cogfile" ]; then
            echo $CHECK
            break
        fi
        if [ -d "$CHECK/bin" ]; then
            echo "$CHECK"
            break
        fi
        CHECK="$(dirname "$CHECK")"
    done
}
PROJECT_DIR=$(get_project_dir)

# Include all scripts inside the tools folder
for file in $SCRIPT_DIR/tools/*; do
  source $file
done

# Drop next argument
shift

# load up user cog config first and then allow a project cogconfig to override
source ~/.cogconfig &>/dev/null
source "$PROJECT_DIR/.cogconfig" &>/dev/null

# split the .cogconfig variable by comma
IFS=, read -a plugin_directories <<< "$COG_PLUGIN_DIRECTORIES"

# create an array of directories to search
# start with ./bin, then any plugin directories
# and last the cog directory
BIN_DIRECTORIES=()
BIN_DIRECTORIES+=( "./bin" )
BIN_DIRECTORIES+=( ${plugin_directories[@]} )
BIN_DIRECTORIES+=( "$SCRIPT_DIR/bin" )
BIN_DIRECTORIES+=( "$PROJECT_DIR/bin" )

# Export Variables for use in cog commands later

# Cog paths
export COG_PLUGIN_DIRECTORIES=${COG_PLUGIN_DIRECTORIES}
export COG_PATH=${DIR}

for bin_dir in "${BIN_DIRECTORIES[@]}"
do
	if [ -f ${bin_dir}/cog-${CMD} ]; then
    	( set -a; source .env &> /dev/null; source "$PROJECT_DIR/.cogconfig" &>/dev/null;  "${bin_dir}/cog-$CMD" "${@}")
    	break
    fi		
done
